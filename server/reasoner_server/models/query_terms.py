# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reasoner_server.models.base_model_ import Model
from reasoner_server import util


class QueryTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anatomical_entity: str=None, disease: str=None, metabolite: str=None, protein: str=None, chemical_substance: str=None):  # noqa: E501
        """QueryTerms - a model defined in OpenAPI

        :param anatomical_entity: The anatomical_entity of this QueryTerms.  # noqa: E501
        :type anatomical_entity: str
        :param disease: The disease of this QueryTerms.  # noqa: E501
        :type disease: str
        :param metabolite: The metabolite of this QueryTerms.  # noqa: E501
        :type metabolite: str
        :param protein: The protein of this QueryTerms.  # noqa: E501
        :type protein: str
        :param chemical_substance: The chemical_substance of this QueryTerms.  # noqa: E501
        :type chemical_substance: str
        """
        self.openapi_types = {
            'anatomical_entity': str,
            'disease': str,
            'metabolite': str,
            'protein': str,
            'chemical_substance': str
        }

        self.attribute_map = {
            'anatomical_entity': 'anatomical_entity',
            'disease': 'disease',
            'metabolite': 'metabolite',
            'protein': 'protein',
            'chemical_substance': 'chemical_substance'
        }

        self._anatomical_entity = anatomical_entity
        self._disease = disease
        self._metabolite = metabolite
        self._protein = protein
        self._chemical_substance = chemical_substance

    @classmethod
    def from_dict(cls, dikt) -> 'QueryTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Query_terms of this QueryTerms.  # noqa: E501
        :rtype: QueryTerms
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anatomical_entity(self) -> str:
        """Gets the anatomical_entity of this QueryTerms.


        :return: The anatomical_entity of this QueryTerms.
        :rtype: str
        """
        return self._anatomical_entity

    @anatomical_entity.setter
    def anatomical_entity(self, anatomical_entity: str):
        """Sets the anatomical_entity of this QueryTerms.


        :param anatomical_entity: The anatomical_entity of this QueryTerms.
        :type anatomical_entity: str
        """

        self._anatomical_entity = anatomical_entity

    @property
    def disease(self) -> str:
        """Gets the disease of this QueryTerms.


        :return: The disease of this QueryTerms.
        :rtype: str
        """
        return self._disease

    @disease.setter
    def disease(self, disease: str):
        """Sets the disease of this QueryTerms.


        :param disease: The disease of this QueryTerms.
        :type disease: str
        """

        self._disease = disease

    @property
    def metabolite(self) -> str:
        """Gets the metabolite of this QueryTerms.


        :return: The metabolite of this QueryTerms.
        :rtype: str
        """
        return self._metabolite

    @metabolite.setter
    def metabolite(self, metabolite: str):
        """Sets the metabolite of this QueryTerms.


        :param metabolite: The metabolite of this QueryTerms.
        :type metabolite: str
        """

        self._metabolite = metabolite

    @property
    def protein(self) -> str:
        """Gets the protein of this QueryTerms.


        :return: The protein of this QueryTerms.
        :rtype: str
        """
        return self._protein

    @protein.setter
    def protein(self, protein: str):
        """Sets the protein of this QueryTerms.


        :param protein: The protein of this QueryTerms.
        :type protein: str
        """

        self._protein = protein

    @property
    def chemical_substance(self) -> str:
        """Gets the chemical_substance of this QueryTerms.


        :return: The chemical_substance of this QueryTerms.
        :rtype: str
        """
        return self._chemical_substance

    @chemical_substance.setter
    def chemical_substance(self, chemical_substance: str):
        """Sets the chemical_substance of this QueryTerms.


        :param chemical_substance: The chemical_substance of this QueryTerms.
        :type chemical_substance: str
        """

        self._chemical_substance = chemical_substance
