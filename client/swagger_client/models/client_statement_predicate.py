# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientStatementPredicate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, edge_label=None, relation=None, negated=None):
        """
        ClientStatementPredicate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'edge_label': 'str',
            'relation': 'str',
            'negated': 'bool'
        }

        self.attribute_map = {
            'edge_label': 'edge_label',
            'relation': 'relation',
            'negated': 'negated'
        }

        self._edge_label = edge_label
        self._relation = relation
        self._negated = negated

    @property
    def edge_label(self):
        """
        Gets the edge_label of this ClientStatementPredicate.
        The predicate edge label associated with this statement, which should be as published by the /predicates API endpoint and must be taken from the minimal predicate ('slot') list of the [Biolink Model](https://biolink.github.io/biolink-model). 

        :return: The edge_label of this ClientStatementPredicate.
        :rtype: str
        """
        return self._edge_label

    @edge_label.setter
    def edge_label(self, edge_label):
        """
        Sets the edge_label of this ClientStatementPredicate.
        The predicate edge label associated with this statement, which should be as published by the /predicates API endpoint and must be taken from the minimal predicate ('slot') list of the [Biolink Model](https://biolink.github.io/biolink-model). 

        :param edge_label: The edge_label of this ClientStatementPredicate.
        :type: str
        """

        self._edge_label = edge_label

    @property
    def relation(self):
        """
        Gets the relation of this ClientStatementPredicate.
        The predicate relation associated with this statement, which should be as published by the /predicates API endpoint with the preferred format being a CURIE where one exists, but strings/labels acceptable. This relation may be equivalent to the edge_label (e.g. edge_label: has_phenotype, relation: RO:0002200), or a more specific relation in cases where the source provides more granularity (e.g. edge_label: molecularly_interacts_with, relation: RO:0002447)

        :return: The relation of this ClientStatementPredicate.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """
        Sets the relation of this ClientStatementPredicate.
        The predicate relation associated with this statement, which should be as published by the /predicates API endpoint with the preferred format being a CURIE where one exists, but strings/labels acceptable. This relation may be equivalent to the edge_label (e.g. edge_label: has_phenotype, relation: RO:0002200), or a more specific relation in cases where the source provides more granularity (e.g. edge_label: molecularly_interacts_with, relation: RO:0002447)

        :param relation: The relation of this ClientStatementPredicate.
        :type: str
        """

        self._relation = relation

    @property
    def negated(self):
        """
        Gets the negated of this ClientStatementPredicate.
        (Optional) a boolean that if set to true, indicates the edge statement is negated i.e. is not true 

        :return: The negated of this ClientStatementPredicate.
        :rtype: bool
        """
        return self._negated

    @negated.setter
    def negated(self, negated):
        """
        Sets the negated of this ClientStatementPredicate.
        (Optional) a boolean that if set to true, indicates the edge statement is negated i.e. is not true 

        :param negated: The negated of this ClientStatementPredicate.
        :type: bool
        """

        self._negated = negated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientStatementPredicate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
