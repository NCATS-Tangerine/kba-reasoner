# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientStatementCitation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, uri=None, name=None, evidence_type=None, date=None):
        """
        ClientStatementCitation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'uri': 'str',
            'name': 'str',
            'evidence_type': 'str',
            'date': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'uri': 'uri',
            'name': 'name',
            'evidence_type': 'evidence_type',
            'date': 'date'
        }

        self._id = id
        self._uri = uri
        self._name = name
        self._evidence_type = evidence_type
        self._date = date

    @property
    def id(self):
        """
        Gets the id of this ClientStatementCitation.
        CURIE-encoded identifier to a citation to evidence supporting the given statement (e.g. PMID of a pubmed abstract) 

        :return: The id of this ClientStatementCitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClientStatementCitation.
        CURIE-encoded identifier to a citation to evidence supporting the given statement (e.g. PMID of a pubmed abstract) 

        :param id: The id of this ClientStatementCitation.
        :type: str
        """

        self._id = id

    @property
    def uri(self):
        """
        Gets the uri of this ClientStatementCitation.
        (optional) expansion of the citation CURIE 

        :return: The uri of this ClientStatementCitation.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ClientStatementCitation.
        (optional) expansion of the citation CURIE 

        :param uri: The uri of this ClientStatementCitation.
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """
        Gets the name of this ClientStatementCitation.
        canonical human readable and searchable name of the citation (i.e. publication title, comment, etc.) 

        :return: The name of this ClientStatementCitation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClientStatementCitation.
        canonical human readable and searchable name of the citation (i.e. publication title, comment, etc.) 

        :param name: The name of this ClientStatementCitation.
        :type: str
        """

        self._name = name

    @property
    def evidence_type(self):
        """
        Gets the evidence_type of this ClientStatementCitation.
        class of evidence supporting the statement made in an edge - typically a class from the ECO ontology (e.g. ECO:0000220 'sequencing assay evidence', see [Evidence Ontology](http://purl.obolibrary.org/obo/eco.owl) 

        :return: The evidence_type of this ClientStatementCitation.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """
        Sets the evidence_type of this ClientStatementCitation.
        class of evidence supporting the statement made in an edge - typically a class from the ECO ontology (e.g. ECO:0000220 'sequencing assay evidence', see [Evidence Ontology](http://purl.obolibrary.org/obo/eco.owl) 

        :param evidence_type: The evidence_type of this ClientStatementCitation.
        :type: str
        """

        self._evidence_type = evidence_type

    @property
    def date(self):
        """
        Gets the date of this ClientStatementCitation.
        publication date of annotation (generally of format 'yyyy-mm-dd') 

        :return: The date of this ClientStatementCitation.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this ClientStatementCitation.
        publication date of annotation (generally of format 'yyyy-mm-dd') 

        :param date: The date of this ClientStatementCitation.
        :type: str
        """

        self._date = date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientStatementCitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
