# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientStatementsQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, query_id=None, source=None, relations=None, target=None, keywords=None, categories=None):
        """
        ClientStatementsQuery - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'query_id': 'str',
            'source': 'str',
            'relations': 'list[str]',
            'target': 'str',
            'keywords': 'list[str]',
            'categories': 'list[str]'
        }

        self.attribute_map = {
            'query_id': 'queryId',
            'source': 'source',
            'relations': 'relations',
            'target': 'target',
            'keywords': 'keywords',
            'categories': 'categories'
        }

        self._query_id = query_id
        self._source = source
        self._relations = relations
        self._target = target
        self._keywords = keywords
        self._categories = categories

    @property
    def query_id(self):
        """
        Gets the query_id of this ClientStatementsQuery.
        session identifier of initiated query 

        :return: The query_id of this ClientStatementsQuery.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """
        Sets the query_id of this ClientStatementsQuery.
        session identifier of initiated query 

        :param query_id: The query_id of this ClientStatementsQuery.
        :type: str
        """

        self._query_id = query_id

    @property
    def source(self):
        """
        Gets the source of this ClientStatementsQuery.
        'source' string parameter to call, echoed back 

        :return: The source of this ClientStatementsQuery.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ClientStatementsQuery.
        'source' string parameter to call, echoed back 

        :param source: The source of this ClientStatementsQuery.
        :type: str
        """

        self._source = source

    @property
    def relations(self):
        """
        Gets the relations of this ClientStatementsQuery.
        'relations' string parameter to call, echoed back 

        :return: The relations of this ClientStatementsQuery.
        :rtype: list[str]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """
        Sets the relations of this ClientStatementsQuery.
        'relations' string parameter to call, echoed back 

        :param relations: The relations of this ClientStatementsQuery.
        :type: list[str]
        """

        self._relations = relations

    @property
    def target(self):
        """
        Gets the target of this ClientStatementsQuery.
        'target' string parameter to call, echoed back 

        :return: The target of this ClientStatementsQuery.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this ClientStatementsQuery.
        'target' string parameter to call, echoed back 

        :param target: The target of this ClientStatementsQuery.
        :type: str
        """

        self._target = target

    @property
    def keywords(self):
        """
        Gets the keywords of this ClientStatementsQuery.
        'keywords' string filter parameter to call, echoed back 

        :return: The keywords of this ClientStatementsQuery.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this ClientStatementsQuery.
        'keywords' string filter parameter to call, echoed back 

        :param keywords: The keywords of this ClientStatementsQuery.
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def categories(self):
        """
        Gets the categories of this ClientStatementsQuery.
        'categories' string parameter to call, echoed back 

        :return: The categories of this ClientStatementsQuery.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this ClientStatementsQuery.
        'categories' string parameter to call, echoed back 

        :param categories: The categories of this ClientStatementsQuery.
        :type: list[str]
        """

        self._categories = categories

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientStatementsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
