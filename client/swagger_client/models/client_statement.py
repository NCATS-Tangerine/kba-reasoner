# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientStatement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, subject=None, predicate=None, object=None, beacon=None):
        """
        ClientStatement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'subject': 'ClientStatementSubject',
            'predicate': 'ClientStatementPredicate',
            'object': 'ClientStatementObject',
            'beacon': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object',
            'beacon': 'beacon'
        }

        self._id = id
        self._subject = subject
        self._predicate = predicate
        self._object = object
        self._beacon = beacon

    @property
    def id(self):
        """
        Gets the id of this ClientStatement.
        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)

        :return: The id of this ClientStatement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClientStatement.
        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)

        :param id: The id of this ClientStatement.
        :type: str
        """

        self._id = id

    @property
    def subject(self):
        """
        Gets the subject of this ClientStatement.

        :return: The subject of this ClientStatement.
        :rtype: ClientStatementSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ClientStatement.

        :param subject: The subject of this ClientStatement.
        :type: ClientStatementSubject
        """

        self._subject = subject

    @property
    def predicate(self):
        """
        Gets the predicate of this ClientStatement.

        :return: The predicate of this ClientStatement.
        :rtype: ClientStatementPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """
        Sets the predicate of this ClientStatement.

        :param predicate: The predicate of this ClientStatement.
        :type: ClientStatementPredicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """
        Gets the object of this ClientStatement.

        :return: The object of this ClientStatement.
        :rtype: ClientStatementObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ClientStatement.

        :param object: The object of this ClientStatement.
        :type: ClientStatementObject
        """

        self._object = object

    @property
    def beacon(self):
        """
        Gets the beacon of this ClientStatement.
        aggregator assigned beacon index number 

        :return: The beacon of this ClientStatement.
        :rtype: int
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """
        Sets the beacon of this ClientStatement.
        aggregator assigned beacon index number 

        :param beacon: The beacon of this ClientStatement.
        :type: int
        """

        self._beacon = beacon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
