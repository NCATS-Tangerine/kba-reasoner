# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientKnowledgeMapStatement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, subject=None, predicate=None, object=None, frequency=None, description=None):
        """
        ClientKnowledgeMapStatement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'subject': 'ClientKnowledgeMapSubject',
            'predicate': 'ClientKnowledgeMapPredicate',
            'object': 'ClientKnowledgeMapObject',
            'frequency': 'int',
            'description': 'str'
        }

        self.attribute_map = {
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object',
            'frequency': 'frequency',
            'description': 'description'
        }

        self._subject = subject
        self._predicate = predicate
        self._object = object
        self._frequency = frequency
        self._description = description

    @property
    def subject(self):
        """
        Gets the subject of this ClientKnowledgeMapStatement.

        :return: The subject of this ClientKnowledgeMapStatement.
        :rtype: ClientKnowledgeMapSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this ClientKnowledgeMapStatement.

        :param subject: The subject of this ClientKnowledgeMapStatement.
        :type: ClientKnowledgeMapSubject
        """

        self._subject = subject

    @property
    def predicate(self):
        """
        Gets the predicate of this ClientKnowledgeMapStatement.

        :return: The predicate of this ClientKnowledgeMapStatement.
        :rtype: ClientKnowledgeMapPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """
        Sets the predicate of this ClientKnowledgeMapStatement.

        :param predicate: The predicate of this ClientKnowledgeMapStatement.
        :type: ClientKnowledgeMapPredicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """
        Gets the object of this ClientKnowledgeMapStatement.

        :return: The object of this ClientKnowledgeMapStatement.
        :rtype: ClientKnowledgeMapObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ClientKnowledgeMapStatement.

        :param object: The object of this ClientKnowledgeMapStatement.
        :type: ClientKnowledgeMapObject
        """

        self._object = object

    @property
    def frequency(self):
        """
        Gets the frequency of this ClientKnowledgeMapStatement.
        the frequency of statements of the specified relationship within the given beacon 

        :return: The frequency of this ClientKnowledgeMapStatement.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this ClientKnowledgeMapStatement.
        the frequency of statements of the specified relationship within the given beacon 

        :param frequency: The frequency of this ClientKnowledgeMapStatement.
        :type: int
        """

        self._frequency = frequency

    @property
    def description(self):
        """
        Gets the description of this ClientKnowledgeMapStatement.
        a description of the nature of the relationship 

        :return: The description of this ClientKnowledgeMapStatement.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ClientKnowledgeMapStatement.
        a description of the nature of the relationship 

        :param description: The description of this ClientKnowledgeMapStatement.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientKnowledgeMapStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
