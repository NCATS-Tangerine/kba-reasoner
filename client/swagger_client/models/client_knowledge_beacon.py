# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself. 

    OpenAPI spec version: 1.1.1
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClientKnowledgeBeacon(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, beacon=None, name=None, url=None, description=None, contact=None, wraps=None, repo=None):
        """
        ClientKnowledgeBeacon - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'beacon': 'int',
            'name': 'str',
            'url': 'str',
            'description': 'str',
            'contact': 'str',
            'wraps': 'str',
            'repo': 'str'
        }

        self.attribute_map = {
            'beacon': 'beacon',
            'name': 'name',
            'url': 'url',
            'description': 'description',
            'contact': 'contact',
            'wraps': 'wraps',
            'repo': 'repo'
        }

        self._beacon = beacon
        self._name = name
        self._url = url
        self._description = description
        self._contact = contact
        self._wraps = wraps
        self._repo = repo

    @property
    def beacon(self):
        """
        Gets the beacon of this ClientKnowledgeBeacon.
        aggregator assigned beacon index identifier 

        :return: The beacon of this ClientKnowledgeBeacon.
        :rtype: int
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """
        Sets the beacon of this ClientKnowledgeBeacon.
        aggregator assigned beacon index identifier 

        :param beacon: The beacon of this ClientKnowledgeBeacon.
        :type: int
        """

        self._beacon = beacon

    @property
    def name(self):
        """
        Gets the name of this ClientKnowledgeBeacon.
        beacon name 

        :return: The name of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClientKnowledgeBeacon.
        beacon name 

        :param name: The name of this ClientKnowledgeBeacon.
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """
        Gets the url of this ClientKnowledgeBeacon.
        URL used to execute API calls on the beacon 

        :return: The url of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ClientKnowledgeBeacon.
        URL used to execute API calls on the beacon 

        :param url: The url of this ClientKnowledgeBeacon.
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """
        Gets the description of this ClientKnowledgeBeacon.
        beacon description 

        :return: The description of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ClientKnowledgeBeacon.
        beacon description 

        :param description: The description of this ClientKnowledgeBeacon.
        :type: str
        """

        self._description = description

    @property
    def contact(self):
        """
        Gets the contact of this ClientKnowledgeBeacon.
        name of the person responsible for this beacon 

        :return: The contact of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this ClientKnowledgeBeacon.
        name of the person responsible for this beacon 

        :param contact: The contact of this ClientKnowledgeBeacon.
        :type: str
        """

        self._contact = contact

    @property
    def wraps(self):
        """
        Gets the wraps of this ClientKnowledgeBeacon.
        URL of this beacon's data source 

        :return: The wraps of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._wraps

    @wraps.setter
    def wraps(self, wraps):
        """
        Sets the wraps of this ClientKnowledgeBeacon.
        URL of this beacon's data source 

        :param wraps: The wraps of this ClientKnowledgeBeacon.
        :type: str
        """

        self._wraps = wraps

    @property
    def repo(self):
        """
        Gets the repo of this ClientKnowledgeBeacon.
        URL of this beacon's repository 

        :return: The repo of this ClientKnowledgeBeacon.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """
        Sets the repo of this ClientKnowledgeBeacon.
        URL of this beacon's repository 

        :param repo: The repo of this ClientKnowledgeBeacon.
        :type: str
        """

        self._repo = repo

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClientKnowledgeBeacon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
